{"version":3,"sources":["components/SubmitButton.js","components/LoginForm.js","components/RegisterForm.js","components/FollowButton.js","components/FollowableUser.js","App.js","index.js"],"names":["SubmitButton","className","type","this","props","disabled","text","React","Component","LoginForm","onChange","e","setState","target","name","value","onSubmit","preventDefault","postData","JSON","stringify","state","fetch","method","body","headers","then","response","json","data","success","history","push","ErrorsList","errors","map","error","rootElement","document","getElementById","ReactDOM","render","catch","console","log","username","password","placeholder","to","id","RegisterForm","password2","FollowButton","handleClick","isDisabled","onClick","jsonData","FollowableUser","dynamicData","i","App","path","component","exact","StrictMode"],"mappings":"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","file":"static/js/main.eb336111.chunk.js","sourcesContent":["import React from 'react'\n\nclass SubmitButton extends React.Component {\n\n    render() {\n        return(\n            <div className=\"submit-button\">\n                <button\n                    className='btn'\n                    type={this.props.type}\n                    disabled={this.props.disabled}>\n                    {this.props.text}\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default SubmitButton;","import React from 'react'\nimport ReactDOM from 'react-dom';\nimport SubmitButton from \"./SubmitButton\";\nimport {Link} from 'react-router-dom'\n\nclass LoginForm extends React.Component {\n    constructor(props) {\n        super(props);\n        // By using states we can associate the name property of the <input> with the state variable and we can initialize values\n        this.state = ({username: '', password: ''})\n    }\n\n    onChange = (e) => {\n        // If using states to handle, this line will index the state variable with the same name as the calling-event's\n        // (the calling input field's) name property and update the state's value to the <input>'s new value\n        this.setState({[e.target.name]: e.target.value })\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n\n        // Since using states means `this.state` holds the current state of each input field, we can simply convert to JSON and its ready for POST\n        const postData = JSON.stringify(this.state);\n\n        /*\n        // If using the FormData instead, it will only take what is currently the value of the <input>, and not its state\n        const formData = new FormData(e.target);\n        // You can see here that this successfully gets/prints the JSON formatted form. However, if you were to try to\n        // set the state in the constructor initially and submit the form before writing any values in the fields,\n        // the output will be all empty fields (ex: {\"username\": \"\",....}) although username's state is 'some initial value'\n        console.log(JSON.stringify(Object.fromEntries(formData)));\n        */\n\n        fetch('/api/login/', {\n            method: 'POST',\n            body: postData,\n            headers: {'content-type': 'application/json'}\n        })\n            .then(response => response.json())\n            .then(data => {\n                if (data.success === 'true') {\n                    return this.props.history.push('/feed')\n                }\n                const ErrorsList = () => (\n                    <ul>{data.errors.map(error => <li key={error}> {error} </li>)}</ul>\n                );\n                const rootElement = document.getElementById(\"post-response-errors\");\n                ReactDOM.render(<ErrorsList />, rootElement);\n            })\n            .catch(error => console.log(error))\n    }\n\n    render() {\n        return(\n            // The name property of every field needs to be the same as the state so that the relation is established\n            <form\n                onSubmit={this.onSubmit}\n                className=\"auth-form input\">\n                Login\n                <input\n                    name='username'\n                    type='text'\n                    placeholder='Username'\n                    onChange={this.onChange}\n                />\n                <input\n                    name='password'\n                    type='password'\n                    placeholder='Password'\n                    onChange={this.onChange}\n                />\n                <SubmitButton\n                    type='submit'\n                    text='Login'\n                />\n                <Link to =\"/register\">\n                <SubmitButton\n                    type='submit'\n                    text='Register'\n                />\n                </Link>\n                <div id=\"post-response-errors\"/>\n            </form>\n        )\n    }\n}\n\nexport default LoginForm;","import React from 'react'\nimport ReactDOM from 'react-dom';\nimport SubmitButton from \"./SubmitButton\";\n\nclass RegisterForm extends React.Component {\n    constructor(props) {\n        super(props);\n        // By using states we can associate the name property of the <input> with the state variable and we can initialize values\n        this.state = ({username: '', password: '', password2: ''})\n    }\n\n    onChange = (e) => {\n        // If using states to handle, this line will index the state variable with the same name as the calling-event's\n        // (the calling input field's) name property and update the state's value to the <input>'s new value\n        this.setState({[e.target.name]: e.target.value })\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n\n        // Since using states means `this.state` holds the current state of each input field, we can simply convert to JSON and its ready for POST\n        const postData = JSON.stringify(this.state);\n\n        /*\n        // If using the FormData instead, it will only take what is currently the value of the <input>, and not its state\n        const formData = new FormData(e.target);\n        // You can see here that this successfully gets/prints the JSON formatted form. However, if you were to try to\n        // set the state in the constructor initially and submit the form before writing any values in the fields,\n        // the output will be all empty fields (ex: {\"username\": \"\",....}) although username's state is 'some initial value'\n        console.log(JSON.stringify(Object.fromEntries(formData)));\n        */\n\n        fetch('/api/register/', {\n            method: 'POST',\n            body: postData,\n            headers: {'content-type': 'application/json'}\n        })\n            .then(response => response.json())\n            .then(data => {\n                if (data.success === 'true') {\n                    return this.props.history.push('/feed')\n                }\n                const ErrorsList = () => (\n                    <ul>{data.errors.map(error => <li key={error}> {error} </li>)}</ul>\n                );\n                const rootElement = document.getElementById(\"post-response-errors\");\n                ReactDOM.render(<ErrorsList />, rootElement);\n            })\n            .catch(error => console.log(error))\n    }\n\n    render() {\n        return(\n            // The name property of every field needs to be the same as the state so that the relation is established\n            <form\n                onSubmit={this.onSubmit}\n                className=\"auth-form input\">\n                Sign up\n                <input\n                    name='username'\n                    type='text'\n                    placeholder='Username'\n                    onChange={this.onChange}\n                />\n                <input\n                    name='password'\n                    type='password'\n                    placeholder='Password'\n                    onChange={this.onChange}\n                />\n                <input\n                    name='password2'\n                    type='password'\n                    placeholder='Repeat Password'\n                    onChange={this.onChange}\n                />\n                <SubmitButton\n                    type='submit'\n                    text='Register'\n                />\n                <div id=\"post-response-errors\"/>\n            </form>\n        )\n    }\n}\n\nexport default RegisterForm;","import React, {Component} from 'react'\n\nclass FollowButton extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {isDisabled: false, text: \"Follow\"};\n    }\n\n    handleClick = () => {\n        this.setState(state => ({\n            isDisabled: true,\n            text: \"Following!\"\n        }));\n    };\n\n    render() {\n        return (\n            <button\n                onClick={this.handleClick} disabled={this.state.isDisabled}\n                className={'follow-btn'}>{this.state.text}\n            </button>\n        )\n    }\n}\n\nexport default FollowButton\n","import React, {Component} from 'react'\nimport FollowButton from \"./FollowButton\"\n\nconst jsonData = [\n  {\n        \"username\": \"Jonathan123\"\n  },\n  {\n        \"username\": \"Ahmad123\"\n  },\n  {\n        \"username\": \"Oliver123\"\n  },\n  {\n        \"username\": \"Daniel123\"\n  },\n  {\n        \"username\": \"Anusha123\"\n  },\n  {\n        \"username\": \"tom123\"\n  },\n  {\n        \"username\": \"helloWorld\"\n  },\n  {\n        \"username\": \"USeeMe123\"\n  },\n  {\n        \"username\": \"Ninho\"\n  },\n  {\n        \"username\": \"Maes\"\n  },\n  {\n        \"username\": \"Drake\"\n  },\n  {\n        \"username\": \"Complex\"\n  },\n  {\n        \"username\": \"O.H\"\n  },\n  {\n        \"username\": \"CNN\"\n  },\n  {\n        \"username\": \"MTV\"\n  },\n  {\n        \"username\": \"LeoTheCat\"\n  },\n  {\n        \"username\": \"TVA\"\n  },\n  {\n        \"username\": \"HappinessIsFalse\"\n  },\n  {\n        \"username\": \"FakeNews\"\n  },\n  {\n        \"username\": \"IcyVibes\"\n  },\n  {\n        \"username\": \"4:20pm\"\n  },\n  {\n        \"username\": \"LeoTheDog\"\n  },\n  {\n        \"username\": \"444\"\n  },\n  {\n        \"username\": \"DOGOTHEGOD\"\n  },\n  {\n        \"username\": \"SSENSE\"\n  },\n  {\n        \"username\": \"HoltRenfrew\"\n  },\n  {\n        \"username\": \"SnakeBoy666\"\n  },\n  {\n        \"username\": \"GeorgeLePigeon\"\n  },\n  {\n        \"username\": \"J.H.\"\n  },\n  {\n        \"username\": \"Hassan555\"\n  },\n  {\n        \"username\": \"Magalie22\"\n  }\n]\n\nclass FollowableUser extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {data: jsonData};\n    }\n\n    render() {\n        return (\n            <div className={'user-grid'}>\n                {\n                    this.state.data.map((dynamicData, i) =>\n                    <div className={'user-block'}>\n                        <div className={'user-block-content'}>\n                            <p>{dynamicData.username}<br/></p>\n                            <FollowButton/>\n                        </div>\n                    </div>\n                    )\n                }\n            </div>\n        )\n    }\n}\n\nexport default FollowableUser\n","import React from 'react';\nimport './App.css';\nimport LoginForm from \"./components/LoginForm\";\nimport RegisterForm from \"./components/RegisterForm\"\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport FollowableUser from \"./components/FollowableUser\";\n\n\n/*\nfunction App() {\n    return (\n        <Router>\n            <div className=\"app\">\n                <Switch>\n                    <div className=\"container\">\n\n                        <Route path=\"/feed\"/>\n                        <Route path=\"/register\" component={RegisterForm} />\n                        <Route path=\"/login\" component={LoginForm} />\n                    </div>\n                       <Route path=\"/follow\" component={FollowableUser} />\n                </Switch>\n            </div>\n        </Router>\n    );\n}\n*/\n\n/*\nfunction App() {\n    return (\n        <Router>\n            <div className=\"app\">\n                <div className=\"container\">\n                    <Switch>\n                        <Route path=\"/feed\"/>\n                        <Route path=\"/register\" component={RegisterForm} />\n                        <Route path=\"/login\" component={LoginForm} />\n                        <Route path=\"/follow\" component={FollowableUser} />\n                    </Switch>\n                </div>\n            </div>\n        </Router>\n    );\n}\n */\n\nfunction App() {\n    return (\n        <Router>\n            <div className=\"app\">\n                <div className=\"container\">\n                    <Switch>\n                        <Route path=\"/feed\"/>\n                        <Route path=\"/register\" component={RegisterForm} />\n                        <Route path=\"/login\" component={LoginForm} />\n\n                    </Switch>\n                </div>\n                <Route exact path=\"/follow\" component={FollowableUser} />\n            </div>\n        </Router>\n    );\n}\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}