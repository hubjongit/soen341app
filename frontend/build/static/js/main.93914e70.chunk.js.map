{"version":3,"sources":["components/SubmitButton.js","components/LoginForm.js","components/RegisterForm.js","App.js","index.js"],"names":["SubmitButton","className","type","this","props","disabled","text","React","Component","LoginForm","onChange","e","setState","target","name","value","onSubmit","preventDefault","postData","JSON","stringify","state","console","log","fetch","method","body","headers","then","response","json","data","success","to","ErrorsList","errors","map","error","rootElement","document","getElementById","ReactDOM","render","catch","username","password","placeholder","id","RegisterForm","password2","App","path","component","StrictMode"],"mappings":"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","file":"static/js/main.93914e70.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass SubmitButton extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"submit-button\">\r\n                <button\r\n                    className='btn'\r\n                    type={this.props.type}\r\n                    disabled={this.props.disabled}>\r\n                    {this.props.text}\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SubmitButton;","import React from 'react'\r\nimport ReactDOM from 'react-dom';\r\nimport SubmitButton from \"./SubmitButton\";\r\nimport {Redirect, Link} from 'react-router-dom'\r\n\r\nclass LoginForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // By using states we can associate the name property of the <input> with the state variable and we can initialize values\r\n        this.state = ({username: '', password: ''})\r\n    }\r\n\r\n    onChange = (e) => {\r\n        // If using states to handle, this line will index the state variable with the same name as the calling-event's\r\n        // (the calling input field's) name property and update the state's value to the <input>'s new value\r\n        this.setState({[e.target.name]: e.target.value })\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        // Since using states means `this.state` holds the current state of each input field, we can simply convert to JSON and its ready for POST\r\n        const postData = JSON.stringify(this.state);\r\n        console.log(postData)\r\n\r\n        /*\r\n        // If using the FormData instead, it will only take what is currently the value of the <input>, and not its state\r\n        const formData = new FormData(e.target);\r\n        // You can see here that this successfully gets/prints the JSON formatted form. However, if you were to try to\r\n        // set the state in the constructor initially and submit the form before writing any values in the fields,\r\n        // the output will be all empty fields (ex: {\"username\": \"\",....}) although username's state is 'some initial value'\r\n        console.log(JSON.stringify(Object.fromEntries(formData)));\r\n        */\r\n\r\n        fetch('/api/login/', {\r\n            method: 'POST',\r\n            body: postData,\r\n            headers: {'content-type': 'application/json'}\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.success === 'true') {\r\n                    return <Redirect to='/feed' />\r\n                }\r\n                const ErrorsList = () => (\r\n                    <ul>{data.errors.map(error => <li key={error}> {error} </li>)}</ul>\r\n                );\r\n                const rootElement = document.getElementById(\"post-response-errors\");\r\n                ReactDOM.render(<ErrorsList />, rootElement);\r\n            })\r\n            .catch(error => console.log(error))\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            // The name property of every field needs to be the same as the state so that the relation is established\r\n            <form\r\n                onSubmit={this.onSubmit}\r\n                className=\"auth-form input\">\r\n                Login\r\n                <input\r\n                    name='username'\r\n                    type='text'\r\n                    placeholder='Username'\r\n                    onChange={this.onChange}\r\n                />\r\n                <input\r\n                    name='password'\r\n                    type='password'\r\n                    placeholder='Password'\r\n                    onChange={this.onChange}\r\n                />\r\n                <SubmitButton\r\n                    type='submit'\r\n                    text='Login'\r\n                />\r\n                <Link to =\"/register\">\r\n                <SubmitButton\r\n                    type='submit'\r\n                    text='Register'\r\n                />\r\n                </Link>\r\n                <div id=\"post-response-errors\"/>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LoginForm;","import React from 'react'\r\nimport ReactDOM from 'react-dom';\r\nimport SubmitButton from \"./SubmitButton\";\r\n\r\nclass RegisterForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // By using states we can associate the name property of the <input> with the state variable and we can initialize values\r\n        this.state = ({username: '', password: '', password2: ''})\r\n    }\r\n\r\n    onChange = (e) => {\r\n        // If using states to handle, this line will index the state variable with the same name as the calling-event's\r\n        // (the calling input field's) name property and update the state's value to the <input>'s new value\r\n        this.setState({[e.target.name]: e.target.value })\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        // Since using states means `this.state` holds the current state of each input field, we can simply convert to JSON and its ready for POST\r\n        const postData = JSON.stringify(this.state);\r\n\r\n        /*\r\n        // If using the FormData instead, it will only take what is currently the value of the <input>, and not its state\r\n        const formData = new FormData(e.target);\r\n        // You can see here that this successfully gets/prints the JSON formatted form. However, if you were to try to\r\n        // set the state in the constructor initially and submit the form before writing any values in the fields,\r\n        // the output will be all empty fields (ex: {\"username\": \"\",....}) although username's state is 'some initial value'\r\n        console.log(JSON.stringify(Object.fromEntries(formData)));\r\n        */\r\n\r\n        fetch('/api/register/', {\r\n            method: 'POST',\r\n            body: postData,\r\n            headers: {'content-type': 'application/json'}\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log(data);\r\n                const ErrorsList = () => (\r\n                    <ul>{data.errors.map(error => <li key={error}> {error} </li>)}</ul>\r\n                );\r\n                const rootElement = document.getElementById(\"post-response-errors\");\r\n                ReactDOM.render(<ErrorsList />, rootElement);\r\n            })\r\n            .catch(error => console.log(error))\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            // The name property of every field needs to be the same as the state so that the relation is established\r\n            <form\r\n                onSubmit={this.onSubmit}\r\n                className=\"auth-form input\">\r\n                Sign up\r\n                <input\r\n                    name='username'\r\n                    type='text'\r\n                    placeholder='Username'\r\n                    onChange={this.onChange}\r\n                />\r\n                <input\r\n                    name='password'\r\n                    type='password'\r\n                    placeholder='Password'\r\n                    onChange={this.onChange}\r\n                />\r\n                <input\r\n                    name='password2'\r\n                    type='password'\r\n                    placeholder='Repeat Password'\r\n                    onChange={this.onChange}\r\n                />\r\n                <SubmitButton\r\n                    type='submit'\r\n                    text='Register'\r\n                />\r\n                <div id=\"post-response-errors\"/>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RegisterForm;","import React from 'react';\r\nimport './App.css';\r\nimport LoginForm from \"./components/LoginForm\";\r\nimport RegisterForm from \"./components/RegisterForm\"\r\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n      <Router>\r\n        <div className=\"app\">\r\n          <div className=\"container\">\r\n            <Switch>\r\n              <Route path=\"/register\" component={RegisterForm} />\r\n              <Route path=\"/login\" component={LoginForm} />\r\n            </Switch>\r\n          </div>\r\n        </div>\r\n      </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}