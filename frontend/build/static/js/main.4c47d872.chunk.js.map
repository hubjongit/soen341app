{"version":3,"sources":["components/SubmitButton.js","components/LoginForm.js","components/RegisterForm.js","components/Feed.js","GlobalFunctions.js","components/PostForm.js","App.js","index.js"],"names":["SubmitButton","className","type","this","props","disabled","text","React","Component","LoginForm","onChange","e","setState","target","name","value","onSubmit","preventDefault","postData","JSON","stringify","state","fetch","method","body","headers","then","response","json","data","success","history","push","ErrorsList","errors","map","error","rootElement","document","getElementById","ReactDOM","render","catch","console","log","username","password","placeholder","to","id","RegisterForm","password2","Post","caption","picture","Avatar","alt","src","Feed","activeItem","completed","editing","fetchPosts","bind","posts","Grid","container","direction","justify","alignItems","post","index","getCookie","cookieValue","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","PostForm","useState","image","setImage","isUploaded","setIsUploaded","setCaption","useHistory","formData","FormData","append","csrftoken","Object","fromEntries","onClick","draggable","htmlFor","style","width","accept","files","reader","FileReader","onload","result","readAsDataURL","App","path","component","StrictMode"],"mappings":"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","file":"static/js/main.4c47d872.chunk.js","sourcesContent":["import React from 'react'\n\nclass SubmitButton extends React.Component {\n\n    render() {\n        return(\n            <div className=\"submit-button\">\n                <button\n                    className='btn'\n                    type={this.props.type}\n                    disabled={this.props.disabled}>\n                    {this.props.text}\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default SubmitButton;","import React from 'react'\nimport ReactDOM from 'react-dom';\nimport SubmitButton from \"./SubmitButton\";\nimport {Link} from 'react-router-dom'\n\nclass LoginForm extends React.Component {\n    constructor(props) {\n        super(props);\n        // By using states we can associate the name property of the <input> with the state variable and we can initialize values\n        this.state = ({username: '', password: ''})\n    }\n\n    onChange = (e) => {\n        // If using states to handle, this line will index the state variable with the same name as the calling-event's\n        // (the calling input field's) name property and update the state's value to the <input>'s new value\n        this.setState({[e.target.name]: e.target.value })\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n\n        // Since using states means `this.state` holds the current state of each input field, we can simply convert to JSON and its ready for POST\n        const postData = JSON.stringify(this.state);\n\n        /*\n        // If using the FormData instead, it will only take what is currently the value of the <input>, and not its state\n        const formData = new FormData(e.target);\n        // You can see here that this successfully gets/prints the JSON formatted form. However, if you were to try to\n        // set the state in the constructor initially and submit the form before writing any values in the fields,\n        // the output will be all empty fields (ex: {\"username\": \"\",....}) although username's state is 'some initial value'\n        console.log(JSON.stringify(Object.fromEntries(formData)));\n        */\n\n        fetch('/api/login/', {\n            method: 'POST',\n            body: postData,\n            headers: {'content-type': 'application/json'}\n        })\n            .then(response => response.json())\n            .then(data => {\n                if (data.success === 'true') {\n                    return this.props.history.push('/feed')\n                }\n                const ErrorsList = () => (\n                    <ul>{data.errors.map(error => <li key={error}> {error} </li>)}</ul>\n                );\n                const rootElement = document.getElementById(\"post-response-errors\");\n                ReactDOM.render(<ErrorsList />, rootElement);\n            })\n            .catch(error => console.log(error))\n    }\n\n    render() {\n        return(\n            // The name property of every field needs to be the same as the state so that the relation is established\n            <form\n                onSubmit={this.onSubmit}\n                className=\"auth-form input\">\n                Login\n                <input\n                    name='username'\n                    type='text'\n                    placeholder='Username'\n                    onChange={this.onChange}\n                />\n                <input\n                    name='password'\n                    type='password'\n                    placeholder='Password'\n                    onChange={this.onChange}\n                />\n                <SubmitButton\n                    type='submit'\n                    text='Login'\n                />\n                <Link to =\"/register\">\n                <SubmitButton\n                    type='submit'\n                    text='Register'\n                />\n                </Link>\n                <div id=\"post-response-errors\"/>\n            </form>\n        )\n    }\n}\n\nexport default LoginForm;","import React from 'react'\nimport ReactDOM from 'react-dom';\nimport SubmitButton from \"./SubmitButton\";\n\nclass RegisterForm extends React.Component {\n    constructor(props) {\n        super(props);\n        // By using states we can associate the name property of the <input> with the state variable and we can initialize values\n        this.state = ({username: '', password: '', password2: ''})\n    }\n\n    onChange = (e) => {\n        // If using states to handle, this line will index the state variable with the same name as the calling-event's\n        // (the calling input field's) name property and update the state's value to the <input>'s new value\n        this.setState({[e.target.name]: e.target.value })\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n\n        // Since using states means `this.state` holds the current state of each input field, we can simply convert to JSON and its ready for POST\n        const postData = JSON.stringify(this.state);\n\n        /*\n        // If using the FormData instead, it will only take what is currently the value of the <input>, and not its state\n        const formData = new FormData(e.target);\n        // You can see here that this successfully gets/prints the JSON formatted form. However, if you were to try to\n        // set the state in the constructor initially and submit the form before writing any values in the fields,\n        // the output will be all empty fields (ex: {\"username\": \"\",....}) although username's state is 'some initial value'\n        console.log(JSON.stringify(Object.fromEntries(formData)));\n        */\n\n        fetch('/api/register/', {\n            method: 'POST',\n            body: postData,\n            headers: {'content-type': 'application/json'}\n        })\n            .then(response => response.json())\n            .then(data => {\n                if (data.success === 'true') {\n                    return this.props.history.push('/feed')\n                }\n                const ErrorsList = () => (\n                    <ul>{data.errors.map(error => <li key={error}> {error} </li>)}</ul>\n                );\n                const rootElement = document.getElementById(\"post-response-errors\");\n                ReactDOM.render(<ErrorsList />, rootElement);\n            })\n            .catch(error => console.log(error))\n    }\n\n    render() {\n        return(\n            // The name property of every field needs to be the same as the state so that the relation is established\n            <form\n                onSubmit={this.onSubmit}\n                className=\"auth-form input\">\n                Sign up\n                <input\n                    name='username'\n                    type='text'\n                    placeholder='Username'\n                    onChange={this.onChange}\n                />\n                <input\n                    name='password'\n                    type='password'\n                    placeholder='Password'\n                    onChange={this.onChange}\n                />\n                <input\n                    name='password2'\n                    type='password'\n                    placeholder='Repeat Password'\n                    onChange={this.onChange}\n                />\n                <SubmitButton\n                    type='submit'\n                    text='Register'\n                />\n                <div id=\"post-response-errors\"/>\n            </form>\n        )\n    }\n}\n\nexport default RegisterForm;","import React, { Component, } from 'react';\nimport {Avatar, Grid} from \"@material-ui/core\";\nimport '../App.css';\nimport ReactDOM from \"react-dom\";\n\n\nclass Feed extends Component {\n\n    constructor(props) {\n        super(props);\n        // this.state = ({username: '', picture: '', caption: ''})\n        this.state = {\n            postData: [],\n            activeItem: {\n\n                //Check what completed,editing fields do\n                id: null,\n                username: '',\n                picture:'',\n                caption:'',\n                completed: false,\n            },\n            editing: false,\n        }\n        this.fetchPosts = this.fetchPosts.bind(this)\n    };\n\n    // this.getFeed();\n    // console.log(postData);\n    // }\n\n\n    fetchPosts() {\n        fetch('/api/feed/', {\n            method: 'GET',\n            headers: {'content-type': 'application/json'}})\n\n            .then(response => response.json())\n            .then(data =>\n                this.setState({\n                        postData: data\n                    }\n                ))}\n    componentDidMount() {\n        this.fetchPosts()\n    }\n\n\n    render() {\n\n        const posts = this.state.postData\n\n        return (\n            <Grid\n                id=\"feed-grid\"\n                container\n                direction=\"column\"\n                justify=\"space-between\"\n                alignItems=\"center\">\n\n                {posts.map(function (post, index) {\n                {/*const test = () => {*/}\n                {/*    return posts.map((posts, index) => {*/}\n             return (\n\n                <div key={index}>\n                    <Post username={post.username} caption={post.caption}\n                          picture={post.picture}/>\n\n                          <span> {posts.username}</span>\n                         <span> {post.username}</span>\n\n                          </div>\n\n                )})\n                }\n\n\n                        {/*<div className=\"container-post\">*/}\n                        {/*    <div className=\"post-card\">*/}\n                        {/*        <div className=\"post-header\">*/}\n                        {/*            <Avatar*/}\n                        {/*                className=\"post-avatar\"*/}\n                        {/*                alt={posts.username}*/}\n                        {/*                src=\"\"*/}\n                        {/*            />*/}\n                        {/*            <h4>{posts.username}</h4>*/}\n                        {/*        </div>*/}\n                        {/*        <img className=\"post-image\"*/}\n                        {/*             src={posts.picture} alt=\"picture\" />*/}\n                        {/*        <h5 className=\"post-text\"> <strong>{posts.username}:</strong> {posts.caption}</h5>*/}\n                        {/*    </div>*/}\n                        {/*</div>*/}\n\n                        {/*TEST*/}\n                        {/*<span>*/}\n                        {/*{posts.username}*/}\n                        {/*<img src={posts.picture}/>*/}\n                        {/*{posts.picture}*/}\n                        {/*{posts.caption}*/}\n                        {/*    </span>*/}\n\n                {/*{this.getFeed().map(post => (*/}\n                {/*    <Post username={post.username} timestamp={post.timestamp} caption={post.caption}*/}\n                {/*          picture={post.picture}/>*/}\n                {/*))}*/}\n\n            </Grid>\n        )\n    }\n}\n\nfunction Post({username, caption, picture}) {\n\n    return(\n        <div className=\"container-post\">\n            <div className=\"post-card\">\n                <div className=\"post-header\">\n                    <Avatar\n                        className=\"post-avatar\"\n                        alt=\"username\"\n                        src=\"\"\n                    />\n                    <h4>{username}</h4>\n                </div>\n                <img className=\"post-image\"\n                     src={picture} alt=\"picture\" />\n                <h5 className=\"post-text\"> <strong>{username}:</strong> {caption}</h5>\n            </div>\n        </div>\n    )\n}\n\n\n\n\n\n\n\n// This sets the data and nothing else\n\n// componentDidMount() {\n//     fetch('/api/feed/', {\n//         method: 'GET',\n//         headers: {'content-type': 'application/json'}\n//             .then(results=> {\n//                 return results.json();\n//             }).then(data =>{\n//                 let postData = data.results.map((username) =>{\n//                     return(\n//                         <div key = {username.results}></div>\n//                     )\n//                 })\n//                 this.setState({postData: postData});\n//                 console.log(\"state\", this.state.postData);\n//             })\n//     })\n//\n//\n// }\n\n\n\n//This getFeed works for console.log and nothing else\n\n\n// getFeed() {\n//     fetch('/api/feed/', {\n//         method: 'GET',\n//         headers: {'content-type': 'application/json'}\n//     })\n//\n//         .then(response => response.json())\n//         .then(data => {\n//             this.postData = data;\n//             console.log(data)\n//         })\n//         .catch(error => console.log(error))\n// }\n// .then(response => response.json())\n// .then(data => this.setState({postData:data,\n//     postData = data;\n//     this.setState({});\n// })\n// .catch(error => console.log(error)))\n// }\n\n\n//<---------------------OG------------------->\n\n// render() {\n//     return (\n//         <Grid\n//             id=\"feed-grid\"\n//             container\n//             direction=\"column\"\n//             justify=\"space-between\"\n//             alignItems=\"center\"\n//         >\n//\n//             {this.getFeed().map(post => (\n//                 <Post username={post.username} timestamp={post.timestamp} caption={post.caption}\n//                       picture={post.picture}/>\n//             ))}\n//         </Grid>\n//     )\n// }\n// }\n//\n\nexport default Feed\n\n","function getCookie(name) {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        const cookies = document.cookie.split(';');\n        for (let i = 0; i < cookies.length; i++) {\n            const cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\nexport default getCookie;","import React, {useState} from 'react'\nimport ReactDOM from \"react-dom\";\nimport getCookie from '../GlobalFunctions'\nimport { useHistory } from 'react-router-dom'\n\nfunction PostForm() {\n    const [image, setImage] = useState(\"\");\n    const [isUploaded, setIsUploaded] = useState(false);\n    const [caption, setCaption] = useState(\"\");\n\n    function handleImageChange(e) {\n        if (e.target.files && e.target.files[0]) {\n            let reader = new FileReader();\n\n            reader.onload = function (e) {\n                setImage(e.target.result);\n                setIsUploaded(true);\n            };\n            reader.readAsDataURL(e.target.files[0]);\n        }\n    }\n\n    function handleCaptionChange(e) {\n        setCaption(e.target.value);\n    }\n\n    // Because this is a functional component, the props are not initially available as in other components (ex: LoginForm),\n    // so we set the history using 'react-router-dom's useHistory() and then push using that object in the .then() promise\n    let history = useHistory();\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        const formData = new FormData();\n        formData.append('picture', image);\n        formData.append('caption', caption);\n\n        const csrftoken = getCookie('csrftoken')\n\n        fetch(\n            '/api/post/', {\n                method: 'POST',\n                body: JSON.stringify(Object.fromEntries(formData)),\n                headers: {\n                    'content-type': 'application/json',\n                    'X-CSRFToken': csrftoken,\n                }\n            }\n        )\n            .then(response => response.json())\n            .then(data => {\n                console.log(data);\n                if (data.success === 'true') {\n                    return history.push('/feed');\n                }\n                const ErrorsList = () => (\n                    <ul>{data.errors.map(error => <li key={error}> {error} </li>)}</ul>\n                );\n                const rootElement = document.getElementById(\"post-response-errors\");\n                ReactDOM.render(<ErrorsList />, rootElement);\n            })\n            .catch(error => console.log(error))\n    }\n\n    return (\n        <form onSubmit={handleSubmit} className={'post-form-main'}>\n            <h3>Make a Post</h3>\n            <div className={'box-upload'}>\n                {!isUploaded ?\n                    (<>\n                        <label className={'img-label'} htmlFor=\"upload-input\">\n                            <img style={{width: 100}} draggable={false}\n                                 src='https://wayou.gallerycdn.vsassets.io/extensions/wayou/vscode-icons-mac/7.25.3/1564717968649/Microsoft.VisualStudio.Services.Icons.Default'\n                                 alt=\"Folder Icon\"/>\n                            <p id={'sub'}>\n                                Click to upload image\n                            </p>\n                        </label>\n                        <input\n                            className={'img-input'}\n                            id=\"upload-input\"\n                            type=\"file\"\n                            accept=\".jpg, .img, .png\"\n                            onChange={handleImageChange}\n                        />\n                    </>) : (\n                        <div className={'image-preview'}>\n                            <img className='close-icon'\n                                 src='https://cdn.iconscout.com/icon/free/png-256/close-1781207-1518581.png'\n                                 alt=\"Close Icon\"\n                                 onClick={() => {\n                                     setIsUploaded(false);\n                                     setImage(null);\n                                 }}\n                            />\n                            <img id=\"uploaded-image\"\n                                 src={image}\n                                 alt=\"Feed Post\"\n                                 draggable={false}\n                            />\n                        </div>\n                    )\n                }\n            </div>\n            <div className={'text-area'}>\n                <textarea value={caption} onChange={handleCaptionChange} type=\"text\" name=\"caption\"\n                          className={'description-input'} placeholder='Description'/>\n            </div>\n            <input className={'post-btn'} type=\"submit\" value=\"Post\"/>\n            <div id={\"post-response-errors\"}/>\n        </form>\n    )\n}\n\nexport default PostForm","import React from 'react';\nimport './App.css';\nimport LoginForm from \"./components/LoginForm\";\nimport RegisterForm from \"./components/RegisterForm\"\nimport Feed from \"./components/Feed\"\nimport PostForm from \"./components/PostForm\"\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\n\n\nfunction App() {\n    return (\n        <Router>\n            <div className=\"app\">\n                <div className=\"container\">\n                    <Switch>\n                        <Route path=\"/feed\" component={Feed} />\n                        <Route path=\"/register\" component={RegisterForm} />\n                        <Route path=\"/login\" component={LoginForm} />\n                        <Route path=\"/post\" component={PostForm} />\n                        <Route path=\"/follow\" />\n                    </Switch>\n                </div>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}