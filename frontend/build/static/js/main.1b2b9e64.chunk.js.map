{"version":3,"sources":["components/SubmitButton.js","components/LoginForm.js","components/RegisterForm.js","components/Feed.js","App.js","index.js"],"names":["SubmitButton","className","type","this","props","disabled","text","React","Component","LoginForm","onChange","e","setState","target","name","value","onSubmit","preventDefault","postData","JSON","stringify","state","fetch","method","body","headers","then","response","json","data","success","history","push","ErrorsList","errors","map","error","rootElement","document","getElementById","ReactDOM","render","catch","console","log","username","password","placeholder","to","id","RegisterForm","password2","Post","caption","picture","Avatar","alt","src","Feed","activeItem","completed","editing","fetchPosts","bind","posts","Grid","container","direction","justify","alignItems","post","index","App","path","component","StrictMode"],"mappings":"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","file":"static/js/main.1b2b9e64.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass SubmitButton extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"submit-button\">\r\n                <button\r\n                    className='btn'\r\n                    type={this.props.type}\r\n                    disabled={this.props.disabled}>\r\n                    {this.props.text}\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SubmitButton;","import React from 'react'\r\nimport ReactDOM from 'react-dom';\r\nimport SubmitButton from \"./SubmitButton\";\r\nimport {Link} from 'react-router-dom'\r\n\r\nclass LoginForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // By using states we can associate the name property of the <input> with the state variable and we can initialize values\r\n        this.state = ({username: '', password: ''})\r\n    }\r\n\r\n    onChange = (e) => {\r\n        // If using states to handle, this line will index the state variable with the same name as the calling-event's\r\n        // (the calling input field's) name property and update the state's value to the <input>'s new value\r\n        this.setState({[e.target.name]: e.target.value })\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        // Since using states means `this.state` holds the current state of each input field, we can simply convert to JSON and its ready for POST\r\n        const postData = JSON.stringify(this.state);\r\n\r\n        /*\r\n        // If using the FormData instead, it will only take what is currently the value of the <input>, and not its state\r\n        const formData = new FormData(e.target);\r\n        // You can see here that this successfully gets/prints the JSON formatted form. However, if you were to try to\r\n        // set the state in the constructor initially and submit the form before writing any values in the fields,\r\n        // the output will be all empty fields (ex: {\"username\": \"\",....}) although username's state is 'some initial value'\r\n        console.log(JSON.stringify(Object.fromEntries(formData)));\r\n        */\r\n\r\n        fetch('/api/login/', {\r\n            method: 'POST',\r\n            body: postData,\r\n            headers: {'content-type': 'application/json'}\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.success === 'true') {\r\n                    return this.props.history.push('/feed')\r\n                }\r\n                const ErrorsList = () => (\r\n                    <ul>{data.errors.map(error => <li key={error}> {error} </li>)}</ul>\r\n                );\r\n                const rootElement = document.getElementById(\"post-response-errors\");\r\n                ReactDOM.render(<ErrorsList />, rootElement);\r\n            })\r\n            .catch(error => console.log(error))\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            // The name property of every field needs to be the same as the state so that the relation is established\r\n            <form\r\n                onSubmit={this.onSubmit}\r\n                className=\"auth-form input\">\r\n                Login\r\n                <input\r\n                    name='username'\r\n                    type='text'\r\n                    placeholder='Username'\r\n                    onChange={this.onChange}\r\n                />\r\n                <input\r\n                    name='password'\r\n                    type='password'\r\n                    placeholder='Password'\r\n                    onChange={this.onChange}\r\n                />\r\n                <SubmitButton\r\n                    type='submit'\r\n                    text='Login'\r\n                />\r\n                <Link to =\"/register\">\r\n                <SubmitButton\r\n                    type='submit'\r\n                    text='Register'\r\n                />\r\n                </Link>\r\n                <div id=\"post-response-errors\"/>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LoginForm;","import React from 'react'\r\nimport ReactDOM from 'react-dom';\r\nimport SubmitButton from \"./SubmitButton\";\r\n\r\nclass RegisterForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // By using states we can associate the name property of the <input> with the state variable and we can initialize values\r\n        this.state = ({username: '', password: '', password2: ''})\r\n    }\r\n\r\n    onChange = (e) => {\r\n        // If using states to handle, this line will index the state variable with the same name as the calling-event's\r\n        // (the calling input field's) name property and update the state's value to the <input>'s new value\r\n        this.setState({[e.target.name]: e.target.value })\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        // Since using states means `this.state` holds the current state of each input field, we can simply convert to JSON and its ready for POST\r\n        const postData = JSON.stringify(this.state);\r\n\r\n        /*\r\n        // If using the FormData instead, it will only take what is currently the value of the <input>, and not its state\r\n        const formData = new FormData(e.target);\r\n        // You can see here that this successfully gets/prints the JSON formatted form. However, if you were to try to\r\n        // set the state in the constructor initially and submit the form before writing any values in the fields,\r\n        // the output will be all empty fields (ex: {\"username\": \"\",....}) although username's state is 'some initial value'\r\n        console.log(JSON.stringify(Object.fromEntries(formData)));\r\n        */\r\n\r\n        fetch('/api/register/', {\r\n            method: 'POST',\r\n            body: postData,\r\n            headers: {'content-type': 'application/json'}\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.success === 'true') {\r\n                    return this.props.history.push('/feed')\r\n                }\r\n                const ErrorsList = () => (\r\n                    <ul>{data.errors.map(error => <li key={error}> {error} </li>)}</ul>\r\n                );\r\n                const rootElement = document.getElementById(\"post-response-errors\");\r\n                ReactDOM.render(<ErrorsList />, rootElement);\r\n            })\r\n            .catch(error => console.log(error))\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            // The name property of every field needs to be the same as the state so that the relation is established\r\n            <form\r\n                onSubmit={this.onSubmit}\r\n                className=\"auth-form input\">\r\n                Sign up\r\n                <input\r\n                    name='username'\r\n                    type='text'\r\n                    placeholder='Username'\r\n                    onChange={this.onChange}\r\n                />\r\n                <input\r\n                    name='password'\r\n                    type='password'\r\n                    placeholder='Password'\r\n                    onChange={this.onChange}\r\n                />\r\n                <input\r\n                    name='password2'\r\n                    type='password'\r\n                    placeholder='Repeat Password'\r\n                    onChange={this.onChange}\r\n                />\r\n                <SubmitButton\r\n                    type='submit'\r\n                    text='Register'\r\n                />\r\n                <div id=\"post-response-errors\"/>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RegisterForm;","import React, { Component, } from 'react';\r\nimport {Avatar, Grid} from \"@material-ui/core\";\r\nimport '../App.css';\r\nimport ReactDOM from \"react-dom\";\r\n\r\n\r\nclass Feed extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        // this.state = ({username: '', picture: '', caption: ''})\r\n        this.state = {\r\n            postData: [],\r\n            activeItem: {\r\n\r\n                //Check what completed,editing fields do\r\n                id: null,\r\n                username: '',\r\n                picture:'',\r\n                caption:'',\r\n                completed: false,\r\n            },\r\n            editing: false,\r\n        }\r\n        this.fetchPosts = this.fetchPosts.bind(this)\r\n    };\r\n\r\n    // this.getFeed();\r\n    // console.log(postData);\r\n    // }\r\n\r\n\r\n    fetchPosts() {\r\n        fetch('/api/feed/', {\r\n            method: 'GET',\r\n            headers: {'content-type': 'application/json'}})\r\n\r\n            .then(response => response.json())\r\n            .then(data =>\r\n                this.setState({\r\n                        postData: data\r\n                    }\r\n                ))}\r\n    componentDidMount() {\r\n        this.fetchPosts()\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const posts = this.state.postData\r\n\r\n        return (\r\n            <Grid\r\n                id=\"feed-grid\"\r\n                container\r\n                direction=\"column\"\r\n                justify=\"space-between\"\r\n                alignItems=\"center\">\r\n\r\n                {posts.map(function (post, index) {\r\n                {/*const test = () => {*/}\r\n                {/*    return posts.map((posts, index) => {*/}\r\n             return (\r\n\r\n                <div key={index}>\r\n                    <Post username={post.username} caption={post.caption}\r\n                          picture={post.picture}/>\r\n                          <span> {posts.username}</span>\r\n                         <span> {post.username}</span>\r\n\r\n                          </div>\r\n\r\n                )})\r\n                }\r\n\r\n\r\n                        {/*<div className=\"container-post\">*/}\r\n                        {/*    <div className=\"post-card\">*/}\r\n                        {/*        <div className=\"post-header\">*/}\r\n                        {/*            <Avatar*/}\r\n                        {/*                className=\"post-avatar\"*/}\r\n                        {/*                alt={posts.username}*/}\r\n                        {/*                src=\"\"*/}\r\n                        {/*            />*/}\r\n                        {/*            <h4>{posts.username}</h4>*/}\r\n                        {/*        </div>*/}\r\n                        {/*        <img className=\"post-image\"*/}\r\n                        {/*             src={posts.picture} alt=\"picture\" />*/}\r\n                        {/*        <h5 className=\"post-text\"> <strong>{posts.username}:</strong> {posts.caption}</h5>*/}\r\n                        {/*    </div>*/}\r\n                        {/*</div>*/}\r\n\r\n                        {/*TEST*/}\r\n                        {/*<span>*/}\r\n                        {/*{posts.username}*/}\r\n                        {/*<img src={posts.picture}/>*/}\r\n                        {/*{posts.picture}*/}\r\n                        {/*{posts.caption}*/}\r\n                        {/*    </span>*/}\r\n\r\n                {/*{this.getFeed().map(post => (*/}\r\n                {/*    <Post username={post.username} timestamp={post.timestamp} caption={post.caption}*/}\r\n                {/*          picture={post.picture}/>*/}\r\n                {/*))}*/}\r\n\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nfunction Post({username, caption, picture}) {\r\n\r\n    return(\r\n        <div className=\"container-post\">\r\n            <div className=\"post-card\">\r\n                <div className=\"post-header\">\r\n                    <Avatar\r\n                        className=\"post-avatar\"\r\n                        alt=\"username\"\r\n                        src=\"\"\r\n                    />\r\n                    <h4>{username}</h4>\r\n                </div>\r\n                <img className=\"post-image\"\r\n                     src={picture} alt=\"picture\" />\r\n                <h5 className=\"post-text\"> <strong>{username}:</strong> {caption}</h5>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// This sets the data and nothing else\r\n\r\n// componentDidMount() {\r\n//     fetch('/api/feed/', {\r\n//         method: 'GET',\r\n//         headers: {'content-type': 'application/json'}\r\n//             .then(results=> {\r\n//                 return results.json();\r\n//             }).then(data =>{\r\n//                 let postData = data.results.map((username) =>{\r\n//                     return(\r\n//                         <div key = {username.results}></div>\r\n//                     )\r\n//                 })\r\n//                 this.setState({postData: postData});\r\n//                 console.log(\"state\", this.state.postData);\r\n//             })\r\n//     })\r\n//\r\n//\r\n// }\r\n\r\n\r\n\r\n//This getFeed works for console.log and nothing else\r\n\r\n\r\n// getFeed() {\r\n//     fetch('/api/feed/', {\r\n//         method: 'GET',\r\n//         headers: {'content-type': 'application/json'}\r\n//     })\r\n//\r\n//         .then(response => response.json())\r\n//         .then(data => {\r\n//             this.postData = data;\r\n//             console.log(data)\r\n//         })\r\n//         .catch(error => console.log(error))\r\n// }\r\n// .then(response => response.json())\r\n// .then(data => this.setState({postData:data,\r\n//     postData = data;\r\n//     this.setState({});\r\n// })\r\n// .catch(error => console.log(error)))\r\n// }\r\n\r\n\r\n//<---------------------OG------------------->\r\n\r\n// render() {\r\n//     return (\r\n//         <Grid\r\n//             id=\"feed-grid\"\r\n//             container\r\n//             direction=\"column\"\r\n//             justify=\"space-between\"\r\n//             alignItems=\"center\"\r\n//         >\r\n//\r\n//             {this.getFeed().map(post => (\r\n//                 <Post username={post.username} timestamp={post.timestamp} caption={post.caption}\r\n//                       picture={post.picture}/>\r\n//             ))}\r\n//         </Grid>\r\n//     )\r\n// }\r\n// }\r\n//\r\n\r\nexport default Feed\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport LoginForm from \"./components/LoginForm\";\r\nimport RegisterForm from \"./components/RegisterForm\"\r\nimport Feed from \"./components/Feed\"\r\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <Router>\r\n            <div className=\"app\">\r\n                <div className=\"container\">\r\n                    <Switch>\r\n                        <Route path=\"/feed\" component={Feed} />\r\n                        <Route path=\"/register\" component={RegisterForm} />\r\n                        <Route path=\"/login\" component={LoginForm} />\r\n                        {/*<Route path=\"/follow\" component={LoginForm} />*/}\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}