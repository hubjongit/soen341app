{"version":3,"sources":["components/SubmitButton.js","components/LoginForm.js","components/RegisterForm.js","components/Feed.js","GlobalFunctions.js","components/PostForm.js","components/LogoutForm.js","components/Navbar.js","App.js","index.js"],"names":["SubmitButton","className","type","this","props","disabled","onClick","text","React","Component","LoginForm","onChange","e","setState","target","name","value","onSubmit","preventDefault","postData","JSON","stringify","state","fetch","method","body","headers","then","response","json","data","success","history","push","ErrorsList","errors","map","error","rootElement","document","getElementById","ReactDOM","render","catch","console","log","username","password","placeholder","to","id","RegisterForm","password2","Post","caption","image","index","Avatar","alt","src","Feed","activeItem","completed","editing","fetchPosts","bind","posts","Grid","container","direction","justify","alignItems","post","getCookie","cookieValue","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","PostForm","useState","setImage","isUploaded","setIsUploaded","setCaption","useHistory","formData","FormData","append","csrftoken","Object","fromEntries","draggable","htmlFor","style","width","accept","files","reader","FileReader","onload","result","readAsDataURL","LogoutForm","submitLogout","Navbar","location","useLocation","isAuthenticated","setIsAuthenticated","useLayoutEffect","callback","user","auth","App","path","component","StrictMode"],"mappings":"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","file":"static/js/main.5b6cdde4.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass SubmitButton extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"submit-button\">\r\n                <button\r\n                    className='btn'\r\n                    type={this.props.type}\r\n                    disabled={this.props.disabled}\r\n                    onClick={this.props.onClick}>\r\n                    {this.props.text}\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SubmitButton;","import React from 'react'\r\nimport ReactDOM from 'react-dom';\r\nimport SubmitButton from \"./SubmitButton\";\r\nimport {Link} from 'react-router-dom'\r\n\r\nclass LoginForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // By using states we can associate the name property of the <input> with the state variable and we can initialize values\r\n        this.state = ({username: '', password: ''})\r\n    }\r\n\r\n    onChange = (e) => {\r\n        // If using states to handle, this line will index the state variable with the same name as the calling-event's\r\n        // (the calling input field's) name property and update the state's value to the <input>'s new value\r\n        this.setState({[e.target.name]: e.target.value })\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        // Since using states means `this.state` holds the current state of each input field, we can simply convert to JSON and its ready for POST\r\n        const postData = JSON.stringify(this.state);\r\n\r\n        /*\r\n        // If using the FormData instead, it will only take what is currently the value of the <input>, and not its state\r\n        const formData = new FormData(e.target);\r\n        // You can see here that this successfully gets/prints the JSON formatted form. However, if you were to try to\r\n        // set the state in the constructor initially and submit the form before writing any values in the fields,\r\n        // the output will be all empty fields (ex: {\"username\": \"\",....}) although username's state is 'some initial value'\r\n        console.log(JSON.stringify(Object.fromEntries(formData)));\r\n        */\r\n\r\n        fetch('/api/login/', {\r\n            method: 'POST',\r\n            body: postData,\r\n            headers: {'content-type': 'application/json'}\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.success === 'true') {\r\n                    return this.props.history.push('/feed')\r\n                }\r\n                const ErrorsList = () => (\r\n                    <ul>{data.errors.map(error => <li key={error}> {error} </li>)}</ul>\r\n                );\r\n                const rootElement = document.getElementById(\"post-response-errors\");\r\n                ReactDOM.render(<ErrorsList />, rootElement);\r\n            })\r\n            .catch(error => console.log(error))\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            // The name property of every field needs to be the same as the state so that the relation is established\r\n            <form\r\n                onSubmit={this.onSubmit}\r\n                className=\"auth-form input\">\r\n                Login\r\n                <input\r\n                    name='username'\r\n                    type='text'\r\n                    placeholder='Username'\r\n                    onChange={this.onChange}\r\n                />\r\n                <input\r\n                    name='password'\r\n                    type='password'\r\n                    placeholder='Password'\r\n                    onChange={this.onChange}\r\n                />\r\n                <SubmitButton\r\n                    type='submit'\r\n                    text='Login'\r\n                />\r\n                <Link to =\"/register\">\r\n                <SubmitButton\r\n                    type='submit'\r\n                    text='Register'\r\n                />\r\n                </Link>\r\n                <div id=\"post-response-errors\"/>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LoginForm;","import React from 'react'\r\nimport ReactDOM from 'react-dom';\r\nimport SubmitButton from \"./SubmitButton\";\r\n\r\nclass RegisterForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // By using states we can associate the name property of the <input> with the state variable and we can initialize values\r\n        this.state = ({username: '', password: '', password2: ''})\r\n    }\r\n\r\n    onChange = (e) => {\r\n        // If using states to handle, this line will index the state variable with the same name as the calling-event's\r\n        // (the calling input field's) name property and update the state's value to the <input>'s new value\r\n        this.setState({[e.target.name]: e.target.value })\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        // Since using states means `this.state` holds the current state of each input field, we can simply convert to JSON and its ready for POST\r\n        const postData = JSON.stringify(this.state);\r\n\r\n        /*\r\n        // If using the FormData instead, it will only take what is currently the value of the <input>, and not its state\r\n        const formData = new FormData(e.target);\r\n        // You can see here that this successfully gets/prints the JSON formatted form. However, if you were to try to\r\n        // set the state in the constructor initially and submit the form before writing any values in the fields,\r\n        // the output will be all empty fields (ex: {\"username\": \"\",....}) although username's state is 'some initial value'\r\n        console.log(JSON.stringify(Object.fromEntries(formData)));\r\n        */\r\n\r\n        fetch('/api/register/', {\r\n            method: 'POST',\r\n            body: postData,\r\n            headers: {'content-type': 'application/json'}\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.success === 'true') {\r\n                    return this.props.history.push('/feed')\r\n                }\r\n                const ErrorsList = () => (\r\n                    <ul>{data.errors.map(error => <li key={error}> {error} </li>)}</ul>\r\n                );\r\n                const rootElement = document.getElementById(\"post-response-errors\");\r\n                ReactDOM.render(<ErrorsList />, rootElement);\r\n            })\r\n            .catch(error => console.log(error))\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            // The name property of every field needs to be the same as the state so that the relation is established\r\n            <form\r\n                onSubmit={this.onSubmit}\r\n                className=\"auth-form input\">\r\n                Sign up\r\n                <input\r\n                    name='username'\r\n                    type='text'\r\n                    placeholder='Username'\r\n                    onChange={this.onChange}\r\n                />\r\n                <input\r\n                    name='password'\r\n                    type='password'\r\n                    placeholder='Password'\r\n                    onChange={this.onChange}\r\n                />\r\n                <input\r\n                    name='password2'\r\n                    type='password'\r\n                    placeholder='Repeat Password'\r\n                    onChange={this.onChange}\r\n                />\r\n                <SubmitButton\r\n                    type='submit'\r\n                    text='Register'\r\n                />\r\n                <div id=\"post-response-errors\"/>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RegisterForm;","import React, {Component,} from 'react';\r\nimport {Avatar, Grid} from \"@material-ui/core\";\r\nimport '../App.css';\r\nimport ReactDOM from \"react-dom\";\r\n\r\n\r\nclass Feed extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        // this.state = ({username: '', image: '', caption: ''})\r\n        this.state = {\r\n            postData: [],\r\n            activeItem: {\r\n\r\n                //Check what completed,editing fields do\r\n                id: null,\r\n                username: '',\r\n                image: '',\r\n                caption: '',\r\n                completed: false,\r\n            },\r\n            editing: false,\r\n        }\r\n        this.fetchPosts = this.fetchPosts.bind(this)\r\n    };\r\n\r\n    fetchPosts() {\r\n        fetch('/api/feed/', {\r\n            method: 'GET',\r\n            headers: {'content-type': 'application/json'}\r\n        })\r\n            .then(response => response.json())\r\n            .then(data =>\r\n                this.setState({\r\n                        postData: data,\r\n                    }\r\n                ))\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchPosts()\r\n    }\r\n\r\n    render() {\r\n        const posts = this.state.postData\r\n        return (\r\n            <Grid\r\n                id=\"feed-grid\"\r\n                container\r\n                direction=\"column\"\r\n                justify=\"space-between\"\r\n                alignItems=\"center\">\r\n\r\n                {posts.map(function (post, index) {\r\n                    return (\r\n                        <Post username={post.username} caption={post.caption}\r\n                              image={post.image} key={index}/>\r\n                    )\r\n                })\r\n                }\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nfunction Post({username, caption, image, index}) {\r\n\r\n    return (\r\n        <div className=\"post-card\" key={index}>\r\n            <div className=\"post-header\">\r\n                <Avatar\r\n                    className=\"post-avatar\"\r\n                    alt={username}\r\n                    src=\"\"\r\n                />\r\n                <p className=\"post-username\">{username}</p>\r\n            </div>\r\n            <img className=\"post-image\"\r\n                 src={image} alt=\"image\"/>\r\n            <p className=\"post-text\"><strong>{username}:</strong> {caption}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Feed;\r\n\r\n\r\n","import React from \"react\";\r\n\r\nexport function getCookie(name) {\r\n    let cookieValue = null;\r\n    if (document.cookie && document.cookie !== '') {\r\n        const cookies = document.cookie.split(';');\r\n        for (let i = 0; i < cookies.length; i++) {\r\n            const cookie = cookies[i].trim();\r\n            // Does this cookie string begin with the name we want?\r\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return cookieValue;\r\n}\r\n\r\nexport const getIsAuthenticated = function (callback) {\r\n     fetch('/api/getauth/', {\r\n        method: 'GET',\r\n        headers: {'content-type': 'application/json'}\r\n    })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            callback(!(data.user === \"AnonymousUser\" && data.auth === \"None\"));\r\n        })\r\n        .catch(error => console.log(error))\r\n}","import React, {useState} from 'react'\r\nimport ReactDOM from \"react-dom\";\r\nimport { getCookie } from '../GlobalFunctions'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nfunction PostForm() {\r\n    const [image, setImage] = useState(\"\");\r\n    const [isUploaded, setIsUploaded] = useState(false);\r\n    const [caption, setCaption] = useState(\"\");\r\n\r\n    function handleImageChange(e) {\r\n        if (e.target.files && e.target.files[0]) {\r\n            let reader = new FileReader();\r\n\r\n            reader.onload = function (e) {\r\n                setImage(e.target.result);\r\n                setIsUploaded(true);\r\n            };\r\n            reader.readAsDataURL(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    function handleCaptionChange(e) {\r\n        setCaption(e.target.value);\r\n    }\r\n\r\n    // Because this is a functional component, the props are not initially available as in other components (ex: LoginForm),\r\n    // so we set the history using 'react-router-dom's useHistory() and then push using that object in the .then() promise\r\n    let history = useHistory();\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        const formData = new FormData();\r\n        formData.append('image', image);\r\n        formData.append('caption', caption);\r\n\r\n        const csrftoken = getCookie('csrftoken')\r\n\r\n        fetch(\r\n            '/api/post/', {\r\n                method: 'POST',\r\n                body: JSON.stringify(Object.fromEntries(formData)),\r\n                headers: {\r\n                    'content-type': 'application/json',\r\n                    'X-CSRFToken': csrftoken,\r\n                }\r\n            }\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.success === 'true') {\r\n                    return history.push('/feed');\r\n                }\r\n                const ErrorsList = () => (\r\n                    <ul>{data.errors.map(error => <li key={error}> {error} </li>)}</ul>\r\n                );\r\n                const rootElement = document.getElementById(\"post-response-errors\");\r\n                ReactDOM.render(<ErrorsList />, rootElement);\r\n            })\r\n            .catch(error => console.log(error))\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className={'post-form-main'}>\r\n            <h3>Make a Post</h3>\r\n            <div className={'box-upload'}>\r\n                {!isUploaded ?\r\n                    (<>\r\n                        <label className={'img-label'} htmlFor=\"upload-input\">\r\n                            <img style={{width: 100}} draggable={false}\r\n                                 src='https://wayou.gallerycdn.vsassets.io/extensions/wayou/vscode-icons-mac/7.25.3/1564717968649/Microsoft.VisualStudio.Services.Icons.Default'\r\n                                 alt=\"Folder Icon\"/>\r\n                            <p id={'sub'}>\r\n                                Click to upload image\r\n                            </p>\r\n                        </label>\r\n                        <input\r\n                            className={'img-input'}\r\n                            id=\"upload-input\"\r\n                            type=\"file\"\r\n                            accept=\".jpg, .img, .png\"\r\n                            onChange={handleImageChange}\r\n                        />\r\n                    </>) : (\r\n                        <div className={'image-preview'}>\r\n                            <img className='close-icon'\r\n                                 src='https://cdn.iconscout.com/icon/free/png-256/close-1781207-1518581.png'\r\n                                 alt=\"Close Icon\"\r\n                                 onClick={() => {\r\n                                     setIsUploaded(false);\r\n                                     setImage(null);\r\n                                 }}\r\n                            />\r\n                            <img id=\"uploaded-image\"\r\n                                 src={image}\r\n                                 alt=\"Feed Post\"\r\n                                 draggable={false}\r\n                            />\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n            <div className={'text-area'}>\r\n                <textarea value={caption} onChange={handleCaptionChange} type=\"text\" name=\"caption\"\r\n                          className={'description-input'} placeholder='Description'/>\r\n            </div>\r\n            <input className={'post-btn'} type=\"submit\" value=\"Post\"/>\r\n            <div id={\"post-response-errors\"}/>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default PostForm","import React from 'react';\r\nimport SubmitButton from './SubmitButton';\r\nimport {getCookie} from \"../GlobalFunctions\";\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nfunction LogoutForm() {\r\n\r\n    let history = useHistory();\r\n\r\n    function submitLogout(e) {\r\n\r\n        const csrftoken = getCookie('csrftoken')\r\n\r\n        fetch('/api/logout/', {\r\n                method: 'POST',\r\n                body: '',\r\n                headers: {\r\n                    'content-type': 'application/json',\r\n                    'X-CSRFToken': csrftoken,\r\n                }\r\n            }\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.success === 'true') {\r\n                    return history.push('/login');\r\n                } else {\r\n                    return history.push('/feed');\r\n                }\r\n            })\r\n            .catch(error => console.log(error))\r\n    }\r\n\r\n    return (\r\n        <SubmitButton onClick={() => submitLogout()} text=\"Logout\"/>\r\n    )\r\n}\r\n\r\nexport default LogoutForm","import React, {useState, useLayoutEffect} from 'react';\r\nimport SubmitButton from './SubmitButton';\r\nimport LogoutForm from './LogoutForm';\r\nimport {getIsAuthenticated} from '../GlobalFunctions'\r\nimport {Link, useLocation} from 'react-router-dom';\r\n\r\nfunction Navbar() {\r\n    const location = useLocation()\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n    useLayoutEffect(() => {\r\n        getIsAuthenticated((data => {\r\n            setIsAuthenticated(data);\r\n        }));\r\n    }, [location]);\r\n\r\n    return (\r\n        <div className=\"navbar-container\">\r\n            <div className=\"navbar\">\r\n                <Link to=\"/feed\" className=\"logo\">\r\n                    SnowFlake\r\n                </Link>\r\n                {isAuthenticated ? (\r\n                    <div className=\"user-status\">\r\n                        <Link to=\"/post\">\r\n                            <SubmitButton text='New Post'/>\r\n                        </Link>\r\n                        <LogoutForm/>\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"user-status\">\r\n                        <Link to=\"/login\">\r\n                            <SubmitButton text='Login'/>\r\n                        </Link>\r\n                        <Link to=\"/register\">\r\n                            <SubmitButton text='Register'/>\r\n                        </Link>\r\n                    </div>\r\n                )\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport LoginForm from \"./components/LoginForm\";\r\nimport RegisterForm from \"./components/RegisterForm\"\r\nimport Feed from \"./components/Feed\"\r\nimport PostForm from \"./components/PostForm\"\r\nimport Navbar from './components/Navbar';\r\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <Router>\r\n            <div className=\"app\">\r\n                <Navbar />\r\n                <div className=\"container\">\r\n                    <Switch>\r\n                        <Route path=\"/feed\" component={Feed} />\r\n                        <Route path=\"/register\" component={RegisterForm} />\r\n                        <Route path=\"/login\" component={LoginForm} />\r\n                        <Route path=\"/post\" component={PostForm} />\r\n                        <Route path=\"/follow\" />\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}