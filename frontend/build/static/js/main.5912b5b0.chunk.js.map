{"version":3,"sources":["components/SubmitButton.js","components/LoginForm.js","components/RegisterForm.js","components/Comments.js","components/Feed.js","GlobalFunctions.js","components/PostForm.js","components/FollowFinder.js","components/LogoutForm.js","components/Navbar.js","components/ProtectedRoute.js","App.js","index.js"],"names":["SubmitButton","className","this","props","classes","type","disabled","onClick","text","React","Component","LoginForm","onChange","e","setState","target","name","value","onSubmit","preventDefault","postData","JSON","stringify","state","fetch","method","body","headers","then","response","json","data","success","history","push","ErrorsList","errors","map","error","rootElement","document","getElementById","ReactDOM","render","catch","console","log","username","password","placeholder","to","id","RegisterForm","password2","Comment","comment","image","src","alt","Avatar","Comments","comments","Grid","container","direction","justify","alignItems","index","Post","caption","Feed","fetchPosts","bind","posts","post","getCookie","cookieValue","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","PostForm","useState","setImage","isUploaded","setIsUploaded","setCaption","useHistory","formData","FormData","append","csrftoken","Object","fromEntries","draggable","htmlFor","style","width","accept","files","reader","FileReader","onload","result","readAsDataURL","FollowNode","isDisabled","setIsDisabled","setText","setClasses","concat","classList","remove","FollowFinder","followUserData","fetchFollowUsers","users","LogoutForm","submitLogout","Navbar","location","useLocation","useLayoutEffect","callback","setIsAuthenticated","user","auth","isAuthenticated","ProtectedRoute","nextProps","nextContext","redirect","App","wrapperSetIsAuthenticated","useCallback","path","component","StrictMode"],"mappings":"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","file":"static/js/main.5912b5b0.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass SubmitButton extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <div className={this.props.classes}>\r\n                <button\r\n                    className='btn'\r\n                    type={this.props.type}\r\n                    disabled={this.props.disabled}\r\n                    onClick={this.props.onClick}>\r\n                    {this.props.text}\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SubmitButton;","import React from 'react'\r\nimport ReactDOM from 'react-dom';\r\nimport SubmitButton from \"./SubmitButton\";\r\nimport {Link} from 'react-router-dom'\r\n\r\n\r\nclass LoginForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // By using states we can associate the name property of the <input> with the state variable and we can initialize values\r\n        this.state = ({username: '', password: ''})\r\n    }\r\n\r\n    onChange = (e) => {\r\n        // If using states to handle, this line will index the state variable with the same name as the calling-event's\r\n        // (the calling input field's) name property and update the state's value to the <input>'s new value\r\n        this.setState({[e.target.name]: e.target.value })\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        // Since using states means `this.state` holds the current state of each input field, we can simply convert to JSON and its ready for POST\r\n        const postData = JSON.stringify(this.state);\r\n\r\n        /*\r\n        // If using the FormData instead, it will only take what is currently the value of the <input>, and not its state\r\n        const formData = new FormData(e.target);\r\n        // You can see here that this successfully gets/prints the JSON formatted form. However, if you were to try to\r\n        // set the state in the constructor initially and submit the form before writing any values in the fields,\r\n        // the output will be all empty fields (ex: {\"username\": \"\",....}) although username's state is 'some initial value'\r\n        console.log(JSON.stringify(Object.fromEntries(formData)));\r\n        */\r\n\r\n        fetch('/api/login/', {\r\n            method: 'POST',\r\n            body: postData,\r\n            headers: {'content-type': 'application/json'}\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.success === 'true') {\r\n                    return this.props.history.push('/feed')\r\n                }\r\n                const ErrorsList = () => (\r\n                    <ul>{data.errors.map(error => <li key={error}> {error} </li>)}</ul>\r\n                );\r\n                const rootElement = document.getElementById(\"post-response-errors\");\r\n                ReactDOM.render(<ErrorsList />, rootElement);\r\n            })\r\n            .catch(error => console.log(error))\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            // The name property of every field needs to be the same as the state so that the relation is established\r\n            <form\r\n                onSubmit={this.onSubmit}\r\n                className=\"auth-form input\">\r\n                Login\r\n                <input\r\n                    name='username'\r\n                    type='text'\r\n                    placeholder='Username'\r\n                    onChange={this.onChange}\r\n                />\r\n                <input\r\n                    name='password'\r\n                    type='password'\r\n                    placeholder='Password'\r\n                    onChange={this.onChange}\r\n                />\r\n                <SubmitButton\r\n                    type='submit'\r\n                    classes='submit-button-padding'\r\n                    text='Login'\r\n                />\r\n                <Link to =\"/register\">\r\n                <SubmitButton\r\n                    type='submit'\r\n                    classes='submit-button-padding'\r\n                    text='Register'\r\n                />\r\n                </Link>\r\n                <div id=\"post-response-errors\"/>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LoginForm;","import React from 'react'\r\nimport ReactDOM from 'react-dom';\r\nimport SubmitButton from \"./SubmitButton\";\r\n\r\n\r\nclass RegisterForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // By using states we can associate the name property of the <input> with the state variable and we can initialize values\r\n        this.state = ({username: '', password: '', password2: ''})\r\n    }\r\n\r\n    onChange = (e) => {\r\n        // If using states to handle, this line will index the state variable with the same name as the calling-event's\r\n        // (the calling input field's) name property and update the state's value to the <input>'s new value\r\n        this.setState({[e.target.name]: e.target.value })\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        // Since using states means `this.state` holds the current state of each input field, we can simply convert to JSON and its ready for POST\r\n        const postData = JSON.stringify(this.state);\r\n\r\n        /*\r\n        // If using the FormData instead, it will only take what is currently the value of the <input>, and not its state\r\n        const formData = new FormData(e.target);\r\n        // You can see here that this successfully gets/prints the JSON formatted form. However, if you were to try to\r\n        // set the state in the constructor initially and submit the form before writing any values in the fields,\r\n        // the output will be all empty fields (ex: {\"username\": \"\",....}) although username's state is 'some initial value'\r\n        console.log(JSON.stringify(Object.fromEntries(formData)));\r\n        */\r\n\r\n        fetch('/api/register/', {\r\n            method: 'POST',\r\n            body: postData,\r\n            headers: {'content-type': 'application/json'}\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.success === 'true') {\r\n                    return this.props.history.push('/feed')\r\n                }\r\n                const ErrorsList = () => (\r\n                    <ul>{data.errors.map(error => <li key={error}> {error} </li>)}</ul>\r\n                );\r\n                const rootElement = document.getElementById(\"post-response-errors\");\r\n                ReactDOM.render(<ErrorsList />, rootElement);\r\n            })\r\n            .catch(error => console.log(error))\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            // The name property of every field needs to be the same as the state so that the relation is established\r\n            <form\r\n                onSubmit={this.onSubmit}\r\n                className=\"auth-form input\">\r\n                Sign up\r\n                <input\r\n                    name='username'\r\n                    type='text'\r\n                    placeholder='Username'\r\n                    onChange={this.onChange}\r\n                />\r\n                <input\r\n                    name='password'\r\n                    type='password'\r\n                    placeholder='Password'\r\n                    onChange={this.onChange}\r\n                />\r\n                <input\r\n                    name='password2'\r\n                    type='password'\r\n                    placeholder='Repeat Password'\r\n                    onChange={this.onChange}\r\n                />\r\n                <SubmitButton\r\n                    type='submit'\r\n                    classes='submit-button-padding'\r\n                    text='Register'\r\n                />\r\n                <div id=\"post-response-errors\"/>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RegisterForm;","import React from \"react\";\r\nimport '../App.css';\r\nimport {Avatar, Grid} from \"@material-ui/core\";\r\nimport SubmitButton from \"./SubmitButton\";\r\n\r\nclass Comments extends React.Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.state = {\r\n    //         commentData: this.props.commentsData,\r\n    //     }\r\n    // }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            comments : [\r\n                {id:1, username:'Daniel', comment: '1st comment', image: 'media/tea1.jpg'},\r\n               // {id:2, commentText: '2nd comment'}\r\n            ]\r\n        }\r\n    }\r\n\r\n//     render() {\r\n//         return (\r\n//             <div className='comments-overlay'>\r\n//                 <p>Hello.</p>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n    render() {\r\n        const comments = this.state;\r\n        return (\r\n            <Grid\r\n                id=\"feed-grid\"\r\n                container\r\n                direction=\"column\"\r\n                justify=\"space-between\"\r\n                alignItems=\"center\">\r\n\r\n                {comments.map(function (comment, index) {\r\n                    return (\r\n                        <Comment username={comment.username} comment={comment.comment}\r\n                                 image={comment.image} id={index}/>\r\n                    )\r\n                })}\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nfunction Comment({id, username, comment,image}){\r\n    return (\r\n\r\n        <div className=\"comment-card\">\r\n            {/*<div className=\"comment-close\"><Close fontSize=\"large\"/></div>*/}\r\n            <img className=\"comment-image\" src={image} alt=\"\"/>\r\n\r\n            <div className=\"comment-section\">\r\n\r\n                <div className=\"comment-header\">\r\n                    <Avatar\r\n                        className=\"comment-avatar\"\r\n                        alt={username}\r\n                        src=\"\"\r\n                    />\r\n                    <h5>{username}</h5>\r\n                </div>\r\n\r\n                <div className=\"comment-replies\" key={id}>\r\n                    <Avatar\r\n                        className=\"comment-avatar\"\r\n                        alt={username}\r\n                        src=\"\"\r\n                    />\r\n                    <h5>{username} : {comment}</h5>\r\n                </div>\r\n\r\n                <div className=\"comment-text\">\r\n\r\n                    <form\r\n                        //onSubmit={this.onSubmit}\r\n                        className=\"comment-form\">\r\n                        <input\r\n                            name='comment'\r\n                            type='text'\r\n                            placeholder='Type a new comment'\r\n                            //   onChange={this.onChange}\r\n                        />\r\n                        <SubmitButton\r\n                            type='submit'\r\n                            classes='submit-button-padding'\r\n                            text='Comment'\r\n                        />\r\n                    </form>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Comments;","import React, {Component,} from 'react';\r\nimport {Avatar, Grid} from \"@material-ui/core\";\r\nimport Comments from './Comments'\r\nimport '../App.css';\r\n\r\n\r\nclass Feed extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            postData: [],\r\n        }\r\n        this.fetchPosts = this.fetchPosts.bind(this);\r\n    };\r\n\r\n    fetchPosts() {\r\n        fetch('/api/feed/', {\r\n            method: 'GET',\r\n            headers: {'content-type': 'application/json'}\r\n        })\r\n            .then(response => response.json())\r\n            .then(data =>\r\n                this.setState({postData: data,})\r\n            )\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchPosts()\r\n    }\r\n\r\n    render() {\r\n        const posts = this.state.postData\r\n        return (\r\n            <Grid\r\n                id=\"feed-grid\"\r\n                container\r\n                direction=\"column\"\r\n                justify=\"space-between\"\r\n                alignItems=\"center\">\r\n\r\n                {posts.map(function (post, index) {\r\n                    return (\r\n                        <Post username={post.username} caption={post.caption}\r\n                              image={post.image} key={index}/>\r\n                    )\r\n                })}\r\n\r\n                {/*<div className=\"comments-overlay\">*/}\r\n                {/*<Comments/>*/}\r\n                {/*</div>*/}\r\n\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nfunction Post({username, caption, image, index}) {\r\n\r\n    return (\r\n        <div className=\"post-card\" key={index}>\r\n            <div className=\"post-header\">\r\n                <Avatar\r\n                    className=\"post-avatar\"\r\n                    alt={username}\r\n                    src=\"\"\r\n                />\r\n                <p className=\"post-username\">{username}</p>\r\n            </div>\r\n            <img className=\"post-image\" src={image} alt=\"\" />\r\n            <p className=\"post-text\"><strong>{username}:</strong> {caption}</p>\r\n            <div className=\"comments-overlay\">\r\n            <Comments/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Feed;\r\n\r\n\r\n","export function getCookie(name) {\r\n    let cookieValue = null;\r\n    if (document.cookie && document.cookie !== '') {\r\n        const cookies = document.cookie.split(';');\r\n        for (let i = 0; i < cookies.length; i++) {\r\n            const cookie = cookies[i].trim();\r\n            // Does this cookie string begin with the name we want?\r\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return cookieValue;\r\n}\r\n\r\nexport const getIsAuthenticated = function (callback) {\r\n     fetch('/api/getauth/', {\r\n        method: 'GET',\r\n        headers: {'content-type': 'application/json'}\r\n    })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            callback(!(data.user === \"AnonymousUser\" && data.auth === \"None\"));\r\n        })\r\n        .catch(error => console.log(error))\r\n}","import React, {useState} from 'react'\r\nimport ReactDOM from \"react-dom\";\r\nimport {getCookie} from '../GlobalFunctions'\r\nimport {useHistory} from 'react-router-dom'\r\n\r\n\r\nfunction PostForm() {\r\n    const [image, setImage] = useState(\"\");\r\n    const [isUploaded, setIsUploaded] = useState(false);\r\n    const [caption, setCaption] = useState(\"\");\r\n\r\n    function handleImageChange(e) {\r\n        if (e.target.files && e.target.files[0]) {\r\n            let reader = new FileReader();\r\n\r\n            reader.onload = function (e) {\r\n                setImage(e.target.result);\r\n                setIsUploaded(true);\r\n            };\r\n            reader.readAsDataURL(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    function handleCaptionChange(e) {\r\n        setCaption(e.target.value);\r\n    }\r\n\r\n    // Because this is a functional component, the props are not initially available as in other components (ex: LoginForm),\r\n    // so we set the history using 'react-router-dom's useHistory() and then push using that object in the .then() promise\r\n    let history = useHistory();\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        const formData = new FormData();\r\n        formData.append('image', image);\r\n        formData.append('caption', caption);\r\n\r\n        const csrftoken = getCookie('csrftoken')\r\n\r\n        fetch(\r\n            '/api/post/', {\r\n                method: 'POST',\r\n                body: JSON.stringify(Object.fromEntries(formData)),\r\n                headers: {\r\n                    'content-type': 'application/json',\r\n                    'X-CSRFToken': csrftoken,\r\n                }\r\n            }\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.success === 'true') {\r\n                    return history.push('/feed');\r\n                }\r\n                const ErrorsList = () => (\r\n                    <ul>{data.errors.map(error => <li key={error}> {error} </li>)}</ul>\r\n                );\r\n                const rootElement = document.getElementById(\"post-response-errors\");\r\n                ReactDOM.render(<ErrorsList />, rootElement);\r\n            })\r\n            .catch(error => console.log(error))\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className={'post-form-main'}>\r\n            <h3>Make a Post</h3>\r\n            <div className={'box-upload'}>\r\n                {!isUploaded ?\r\n                    (<>\r\n                        <label className={'img-label'} htmlFor=\"upload-input\">\r\n                            <img style={{width: 100}} draggable={false}\r\n                                 src='https://wayou.gallerycdn.vsassets.io/extensions/wayou/vscode-icons-mac/7.25.3/1564717968649/Microsoft.VisualStudio.Services.Icons.Default'\r\n                                 alt=\"Folder Icon\"/>\r\n                            <p id={'sub'}>\r\n                                Click to upload image\r\n                            </p>\r\n                        </label>\r\n                        <input\r\n                            className={'img-input'}\r\n                            id=\"upload-input\"\r\n                            type=\"file\"\r\n                            accept=\".jpg, .img, .png\"\r\n                            onChange={handleImageChange}\r\n                        />\r\n                    </>) : (\r\n                        <div className={'image-preview'}>\r\n                            <img className='close-icon'\r\n                                 src='https://cdn.iconscout.com/icon/free/png-256/close-1781207-1518581.png'\r\n                                 alt=\"Close Icon\"\r\n                                 onClick={() => {\r\n                                     setIsUploaded(false);\r\n                                     setImage(null);\r\n                                 }}\r\n                            />\r\n                            <img id=\"uploaded-image\"\r\n                                 src={image}\r\n                                 alt=\"Feed Post\"\r\n                                 draggable={false}\r\n                            />\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n            <div className={'text-area'}>\r\n                <textarea value={caption} onChange={handleCaptionChange} type=\"text\" name=\"caption\"\r\n                          className={'description-input'} placeholder='Description'/>\r\n            </div>\r\n            <input className={'post-btn'} type=\"submit\" value=\"Post\"/>\r\n            <div id={\"post-response-errors\"}/>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default PostForm","import React, {useState} from 'react'\r\nimport {getCookie} from \"../GlobalFunctions\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\n\r\nclass FollowFinder extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {followUserData: []};\r\n        this.fetchFollowUsers = this.fetchFollowUsers.bind(this);\r\n    }\r\n\r\n    fetchFollowUsers() {\r\n        fetch('/api/follow/', {\r\n            method: 'GET',\r\n            headers: {'content-type': 'application/json'}\r\n        })\r\n            .then(response => response.json())\r\n            .then(data =>\r\n                this.setState({followUserData: data,})\r\n            )\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchFollowUsers()\r\n    }\r\n\r\n    render() {\r\n        const users = this.state.followUserData\r\n        return (\r\n            <div className='user-grid'>\r\n                {users.map((data, index) =>\r\n                    <FollowNode username={data.username}/>)\r\n                }\r\n                <div id='post-response-errors' className='display-none' />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction FollowNode({username}) {\r\n    const [isDisabled, setIsDisabled] = useState(false);\r\n    const [text, setText] = useState(\"Follow\");\r\n    const [classes, setClasses] = useState('follow-node');\r\n\r\n    function handleClick() {\r\n\r\n        const csrftoken = getCookie('csrftoken')\r\n\r\n        const formData = new FormData();\r\n        formData.append('user_to_follow', username);\r\n\r\n        fetch(\r\n            '/api/follow/', {\r\n                method: 'POST',\r\n                body: JSON.stringify(Object.fromEntries(formData)),\r\n                headers: {\r\n                    'content-type': 'application/json',\r\n                    'X-CSRFToken': csrftoken,\r\n                }\r\n            }\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.success === 'true') {\r\n                    setIsDisabled(true);\r\n                    setText(\"Following!\");\r\n                    setClasses(classes.concat(' follow-node-clicked'))\r\n                    return;\r\n                }\r\n                const ErrorsList = () => (\r\n                    <ul>{data.errors.map(error => <li key={error}> {error} </li>)}</ul>\r\n                );\r\n                const rootElement = document.getElementById('post-response-errors');\r\n                rootElement.classList.remove('display-none');\r\n                ReactDOM.render(<ErrorsList />, rootElement);\r\n            })\r\n            .catch(error => console.log(error))\r\n    }\r\n\r\n    return (\r\n        <div className={classes}>\r\n            <p>{username}</p>\r\n            <button\r\n                onClick={handleClick} disabled={isDisabled}\r\n                className={'follow-button'}>{text}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FollowFinder;\r\n","import React from 'react';\r\nimport SubmitButton from './SubmitButton';\r\nimport {getCookie} from \"../GlobalFunctions\";\r\nimport {useHistory} from 'react-router-dom';\r\n\r\n\r\nfunction LogoutForm() {\r\n\r\n    let history = useHistory();\r\n\r\n    function submitLogout(e) {\r\n\r\n        const csrftoken = getCookie('csrftoken')\r\n\r\n        fetch('/api/logout/', {\r\n                method: 'POST',\r\n                body: '',\r\n                headers: {\r\n                    'content-type': 'application/json',\r\n                    'X-CSRFToken': csrftoken,\r\n                }\r\n            }\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.success === 'true') {\r\n                    return history.push('/login');\r\n                } else {\r\n                    return history.push('/feed');\r\n                }\r\n            })\r\n            .catch(error => console.log(error))\r\n    }\r\n\r\n    return (\r\n        <SubmitButton onClick={() => submitLogout()} text=\"Logout\"/>\r\n    )\r\n}\r\n\r\nexport default LogoutForm","import React, {useLayoutEffect} from 'react';\r\nimport SubmitButton from './SubmitButton';\r\nimport LogoutForm from './LogoutForm';\r\nimport {Link, useLocation} from 'react-router-dom';\r\nimport {getIsAuthenticated} from \"../GlobalFunctions\";\r\n\r\n\r\nfunction Navbar(props) {\r\n\r\n    const location = useLocation()\r\n\r\n    useLayoutEffect(() => {\r\n        getIsAuthenticated((data => {\r\n            props.setIsAuthenticated(data);\r\n        }));\r\n    }, [location, props]);\r\n\r\n    return (\r\n        <div className=\"navbar-container\">\r\n            <div className=\"navbar\">\r\n                <Link to=\"/feed\" className=\"logo mr-auto\">\r\n                    SnowFlake\r\n                </Link>\r\n                {props.isAuthenticated ? (\r\n                    <div className=\"user-status ml-auto\">\r\n                        <Link to=\"/post\">\r\n                            <SubmitButton text='New Post'/>\r\n                        </Link>\r\n                        <Link to=\"/follow\">\r\n                            <SubmitButton text='Follow Finder'/>\r\n                        </Link>\r\n                        <LogoutForm/>\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"user-status ml-auto\">\r\n                        <Link to=\"/login\">\r\n                            <SubmitButton text='Login'/>\r\n                        </Link>\r\n                        <Link to=\"/register\">\r\n                            <SubmitButton text='Register'/>\r\n                        </Link>\r\n                    </div>\r\n                )\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport {Redirect, Route} from \"react-router-dom\";\r\n\r\nclass ProtectedRoute extends React.Component {\r\n\r\n    componentWillReceiveProps(nextProps, nextContext) {\r\n        if (this.props.isAuthenticated !== nextProps.isAuthenticated) {\r\n            this.setState({isAuthenticated: nextProps.isAuthenticated});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {isAuthenticated, redirect, ...props} = this.props;\r\n        return (\r\n            isAuthenticated ?\r\n                <Route\r\n                    {...props}\r\n                /> :\r\n                <Redirect to={redirect}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProtectedRoute;","import React, {useCallback, useState} from 'react';\r\nimport './App.css';\r\nimport LoginForm from './components/LoginForm';\r\nimport RegisterForm from './components/RegisterForm';\r\nimport Feed from './components/Feed';\r\nimport PostForm from './components/PostForm';\r\nimport FollowFinder from './components/FollowFinder';\r\nimport Navbar from './components/Navbar';\r\nimport ProtectedRoute from './components/ProtectedRoute';\r\nimport {BrowserRouter as Router, Switch} from 'react-router-dom';\r\n\r\n\r\nfunction App() {\r\n\r\n    const [isAuthenticated, setIsAuthenticated] = useState(true);\r\n\r\n    const wrapperSetIsAuthenticated = useCallback(auth => {\r\n        setIsAuthenticated(auth);\r\n    }, [setIsAuthenticated, ]);\r\n\r\n    return (\r\n        <Router>\r\n            <div className=\"app\">\r\n                <Navbar isAuthenticated={isAuthenticated} setIsAuthenticated={wrapperSetIsAuthenticated}/>\r\n                <div className=\"container\">\r\n                    <Switch>\r\n                        <ProtectedRoute path=\"/login\" component={LoginForm} isAuthenticated={!isAuthenticated} redirect={'/feed'} />\r\n                        <ProtectedRoute path=\"/register\" component={RegisterForm} isAuthenticated={!isAuthenticated} redirect={'/feed'} />\r\n                        <ProtectedRoute path=\"/feed\" component={Feed} isAuthenticated={isAuthenticated} redirect={'/login'} />\r\n                        <ProtectedRoute path=\"/post\" component={PostForm} isAuthenticated={isAuthenticated} redirect={'/login'}  />\r\n                        <ProtectedRoute path=\"/follow\" component={FollowFinder} isAuthenticated={isAuthenticated} redirect={'/login'}  />\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { BrowserRouter as Router } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Router>\r\n          <App />\r\n      </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}