{"version":3,"sources":["components/SubmitButton.js","components/LoginForm.js","components/RegisterForm.js","components/PostForm.js","App.js","index.js"],"names":["SubmitButton","className","type","this","props","disabled","text","React","Component","LoginForm","onChange","e","setState","target","name","value","onSubmit","preventDefault","postData","JSON","stringify","state","fetch","method","body","headers","then","response","json","data","success","history","push","ErrorsList","errors","map","error","rootElement","document","getElementById","ReactDOM","render","catch","console","log","username","password","placeholder","to","id","RegisterForm","password2","PostForm","useState","image","setImage","isUploaded","setIsUploaded","caption","setCaption","form_data","FormData","append","src","alt","onClick","draggable","htmlFor","style","width","accept","files","reader","FileReader","onload","result","readAsDataURL","App","path","component","StrictMode"],"mappings":"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","file":"static/js/main.c66018a8.chunk.js","sourcesContent":["import React from 'react'\n\nclass SubmitButton extends React.Component {\n\n    render() {\n        return(\n            <div className=\"submit-button\">\n                <button\n                    className='btn'\n                    type={this.props.type}\n                    disabled={this.props.disabled}>\n                    {this.props.text}\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default SubmitButton;","import React from 'react'\nimport ReactDOM from 'react-dom';\nimport SubmitButton from \"./SubmitButton\";\nimport {Link} from 'react-router-dom'\n\nclass LoginForm extends React.Component {\n    constructor(props) {\n        super(props);\n        // By using states we can associate the name property of the <input> with the state variable and we can initialize values\n        this.state = ({username: '', password: ''})\n    }\n\n    onChange = (e) => {\n        // If using states to handle, this line will index the state variable with the same name as the calling-event's\n        // (the calling input field's) name property and update the state's value to the <input>'s new value\n        this.setState({[e.target.name]: e.target.value })\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n\n        // Since using states means `this.state` holds the current state of each input field, we can simply convert to JSON and its ready for POST\n        const postData = JSON.stringify(this.state);\n\n        /*\n        // If using the FormData instead, it will only take what is currently the value of the <input>, and not its state\n        const formData = new FormData(e.target);\n        // You can see here that this successfully gets/prints the JSON formatted form. However, if you were to try to\n        // set the state in the constructor initially and submit the form before writing any values in the fields,\n        // the output will be all empty fields (ex: {\"username\": \"\",....}) although username's state is 'some initial value'\n        console.log(JSON.stringify(Object.fromEntries(formData)));\n        */\n\n        fetch('/api/login/', {\n            method: 'POST',\n            body: postData,\n            headers: {'content-type': 'application/json'}\n        })\n            .then(response => response.json())\n            .then(data => {\n                if (data.success === 'true') {\n                    return this.props.history.push('/feed')\n                }\n                const ErrorsList = () => (\n                    <ul>{data.errors.map(error => <li key={error}> {error} </li>)}</ul>\n                );\n                const rootElement = document.getElementById(\"post-response-errors\");\n                ReactDOM.render(<ErrorsList />, rootElement);\n            })\n            .catch(error => console.log(error))\n    }\n\n    render() {\n        return(\n            // The name property of every field needs to be the same as the state so that the relation is established\n            <form\n                onSubmit={this.onSubmit}\n                className=\"auth-form input\">\n                Login\n                <input\n                    name='username'\n                    type='text'\n                    placeholder='Username'\n                    onChange={this.onChange}\n                />\n                <input\n                    name='password'\n                    type='password'\n                    placeholder='Password'\n                    onChange={this.onChange}\n                />\n                <SubmitButton\n                    type='submit'\n                    text='Login'\n                />\n                <Link to =\"/register\">\n                <SubmitButton\n                    type='submit'\n                    text='Register'\n                />\n                </Link>\n                <div id=\"post-response-errors\"/>\n            </form>\n        )\n    }\n}\n\nexport default LoginForm;","import React from 'react'\nimport ReactDOM from 'react-dom';\nimport SubmitButton from \"./SubmitButton\";\n\nclass RegisterForm extends React.Component {\n    constructor(props) {\n        super(props);\n        // By using states we can associate the name property of the <input> with the state variable and we can initialize values\n        this.state = ({username: '', password: '', password2: ''})\n    }\n\n    onChange = (e) => {\n        // If using states to handle, this line will index the state variable with the same name as the calling-event's\n        // (the calling input field's) name property and update the state's value to the <input>'s new value\n        this.setState({[e.target.name]: e.target.value })\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n\n        // Since using states means `this.state` holds the current state of each input field, we can simply convert to JSON and its ready for POST\n        const postData = JSON.stringify(this.state);\n\n        /*\n        // If using the FormData instead, it will only take what is currently the value of the <input>, and not its state\n        const formData = new FormData(e.target);\n        // You can see here that this successfully gets/prints the JSON formatted form. However, if you were to try to\n        // set the state in the constructor initially and submit the form before writing any values in the fields,\n        // the output will be all empty fields (ex: {\"username\": \"\",....}) although username's state is 'some initial value'\n        console.log(JSON.stringify(Object.fromEntries(formData)));\n        */\n\n        fetch('/api/register/', {\n            method: 'POST',\n            body: postData,\n            headers: {'content-type': 'application/json'}\n        })\n            .then(response => response.json())\n            .then(data => {\n                if (data.success === 'true') {\n                    return this.props.history.push('/feed')\n                }\n                const ErrorsList = () => (\n                    <ul>{data.errors.map(error => <li key={error}> {error} </li>)}</ul>\n                );\n                const rootElement = document.getElementById(\"post-response-errors\");\n                ReactDOM.render(<ErrorsList />, rootElement);\n            })\n            .catch(error => console.log(error))\n    }\n\n    render() {\n        return(\n            // The name property of every field needs to be the same as the state so that the relation is established\n            <form\n                onSubmit={this.onSubmit}\n                className=\"auth-form input\">\n                Sign up\n                <input\n                    name='username'\n                    type='text'\n                    placeholder='Username'\n                    onChange={this.onChange}\n                />\n                <input\n                    name='password'\n                    type='password'\n                    placeholder='Password'\n                    onChange={this.onChange}\n                />\n                <input\n                    name='password2'\n                    type='password'\n                    placeholder='Repeat Password'\n                    onChange={this.onChange}\n                />\n                <SubmitButton\n                    type='submit'\n                    text='Register'\n                />\n                <div id=\"post-response-errors\"/>\n            </form>\n        )\n    }\n}\n\nexport default RegisterForm;","import React, {useState} from 'react'\nimport ReactDOM from \"react-dom\";\n\nfunction PostForm() {\n    const [image, setImage] = useState(\"\");\n    const [isUploaded, setIsUploaded] = useState(false);\n    const [caption, setCaption] = useState(\"\");\n\n    function handleImageChange(e) {\n        if (e.target.files && e.target.files[0]) {\n            let reader = new FileReader();\n\n            reader.onload = function (e) {\n                setImage(e.target.result);\n                setIsUploaded(true);\n            };\n            reader.readAsDataURL(e.target.files[0]);\n        }\n    }\n\n    function handleCaptionChange(e) {\n        setCaption(e.target.value);\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        console.log(image);\n        console.log(caption);\n        let form_data = new FormData();\n        form_data.append('image', image);\n        form_data.append('caption', caption);\n\n        fetch(\n            '/api/post/', {\n                method: 'POST',\n                body: JSON.stringify(form_data),\n                headers: {'content-type': 'application/json'}\n                //headers: {'content-type': 'multipart/form-data'}\n            }\n        )\n            .then(response => response.json())\n            .then(data => {\n                console.log(data);\n                const ErrorsList = () => (\n                    <ul>{data.errors.map(error => <li key={error}> {error} </li>)}</ul>\n                );\n                const rootElement = document.getElementById(\"post-response-errors\");\n                ReactDOM.render(<ErrorsList/>, rootElement);\n            })\n            .catch(error => console.log(error))\n    }\n\n    return (\n        <form onSubmit={handleSubmit} className={'post-form-main'}>\n            <h3>Make a Post</h3>\n            <div className={'box-upload'}>\n                {!isUploaded ?\n                    (<>\n                        <label className={'img-label'} htmlFor=\"upload-input\">\n                            <img style={{width: 100}} draggable={false}\n                                 src='https://wayou.gallerycdn.vsassets.io/extensions/wayou/vscode-icons-mac/7.25.3/1564717968649/Microsoft.VisualStudio.Services.Icons.Default'\n                                 alt=\"Folder Icon\"/>\n                            <p id={'sub'}>\n                                Click to upload image\n                            </p>\n                        </label>\n                        <input\n                            className={'img-input'}\n                            id=\"upload-input\"\n                            type=\"file\"\n                            accept=\".jpg, .img, .png\"\n                            onChange={handleImageChange}\n                        />\n                    </>) : (\n                        <div className={'image-preview'}>\n                            <img className='close-icon'\n                                 src='https://cdn.iconscout.com/icon/free/png-256/close-1781207-1518581.png'\n                                 alt=\"Close Icon\"\n                                 onClick={() => {\n                                     setIsUploaded(false);\n                                     setImage(null);\n                                 }}\n                            />\n                            <img id=\"uploaded-image\"\n                                 src={image}\n                                 alt=\"Feed Post\"\n                                 draggable={false}\n                            />\n                        </div>\n                    )\n                }\n            </div>\n            <div className={'text-area'}>\n                <textarea value={caption} onChange={handleCaptionChange} type=\"text\" name=\"caption\"\n                       className={'description-input'} placeholder='Description'/>\n            </div>\n            <input className={'post-btn'} type=\"submit\" value=\"Post\"/>\n            <div id={\"post-response-errors\"}/>\n        </form>\n    )\n}\n\nexport default PostForm","import React from 'react';\nimport './App.css';\nimport LoginForm from \"./components/LoginForm\";\nimport RegisterForm from \"./components/RegisterForm\"\nimport PostForm from './components/PostForm'\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\n\n\nfunction App() {\n    return (\n        <Router>\n            <div className=\"app\">\n                <div className=\"container\">\n                    <Switch>\n                        <Route path=\"/feed\"/>\n                        <Route path=\"/register\" component={RegisterForm} />\n                        <Route path=\"/login\" component={LoginForm} />\n                        <Route path=\"/post\" component={PostForm} />\n                        <Route path=\"/follow\" />\n                    </Switch>\n                </div>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}